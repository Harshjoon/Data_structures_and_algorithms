UNION FIND
Union find is a data structure that keeps track of elements which are
split into one or more disjoint sets. It has two primary operations:
find and union 

When and where is a Union Find used ?
- kruskal's minimum spanning tree algorithm
- Grid precolation
- Network connectivity 
- Least common ancestor in trees
- Image processing 

COMPLEXITY 

Construction        O(n)
Union               a(n) (amortized constant time)
Find                a(n)
Get component size  a(n)
Check if connected  a(n)
Count components    O(1)


KRUSKAL's MINIMUM SPANNING TREE 
Given a graph G = (V,E) we want to find a Minimum spanning tree in the
graph (it may not be unique).

A minimum spanning tree is a subset of the edges which connect all
vertices in the graph with the minimal total edge cost.

- Sort edges by asending edge weight.
- Walk through the sorted edges and look at the two nodes the edge belongs to,
if the nodes are already unified we don't include this edge, otherwise we include
it and unify the nodes.
- The algorithm terminates when every edge has been processed or all the
vertices have been unified.


UNION FIND operations

Creating a Union find 
To begin using Union Find, first construct a bijection(a mapping) between your
objects and the integers in the range [0,n).
NOTE: this step is not necessary in general, but will allow us to construct an array-based union
find.

Stored union find information in an array. Each index has an associated object we can
lookup through mapping.

-- SUMMARY --
FIND OPERATION : To find which component a particular element belongs to find the
root of that component by following the parent nodes until a self loop is reached.

UNION OPERATION : To unify two elements find which are the root nodes of each component 
and if the root nodes are different make one of the root nodes to be the parent of other.

REMARKS:
in this data structure, we do not "un-union" elements. In general, this would be very 
inefficient to do since we would have to update all the children of a node.

The number of components is equal to the number of roots remaining. Also, remark that the
number of root nodes never increases.

Our current version of Union Find does not support the nice a(n) time complexity we want.

Checking if H and B belong to the same group takes five hops and in the worst case this is
potentially much more. 




PATH COMPRESSED UNION FIND 
-- complete this --


